{
  "version": 3,
  "sources": ["../src/helper.ts", "../src/code.ts"],
  "sourcesContent": ["interface GetLayout {\n  type: \"getLayoutSpecifications\";\n}\ninterface GetColors {\n  type: \"getColorSpecifications\";\n}\ninterface SetColorAlias {\n  type: \"setColorAlias\";\n}\ninterface SwapComponent {\n  type: \"swapComponent\";\n}\nexport type Message = GetLayout | GetColors | SetColorAlias | SwapComponent;\n\nexport const findLocalCollectionByName = (\n  name: string,\n  collectionsLocal: Array<VariableCollection>\n) => collectionsLocal.find((c) => c.name === name);\n\nexport const findRemoteCollectionByName = (\n  name: string,\n  collectionsRemote: Array<LibraryVariableCollection>\n) => collectionsRemote.find((c) => c.name === name);\n\ntype ValidNodeType =\n  | \"FRAME\"\n  | \"COMPONENT\"\n  | \"INSTANCE\"\n  | \"SECTION\"\n  | \"GROUP\"\n  | \"RECTANGLE\"\n  | \"TEXT\"\n  | \"ELLIPSE\"\n  | \"VECTOR\";\nexport type ValidNode =\n  | FrameNode\n  | GroupNode\n  | ComponentNode\n  | InstanceNode\n  | SectionNode\n  | RectangleNode;\n\nexport const isValidNodeType = (node: SceneNode): node is ValidNode =>\n  node.type === \"FRAME\" ||\n  node.type === \"COMPONENT\" ||\n  node.type === \"INSTANCE\" ||\n  node.type === \"SECTION\" ||\n  node.type === \"GROUP\" ||\n  node.type === \"RECTANGLE\" ||\n  node.type === \"TEXT\" ||\n  node.type === \"ELLIPSE\" ||\n  node.type === \"VECTOR\";\n\nexport const isValidInstance = (node: SceneNode): node is InstanceNode =>\n  node.type === \"INSTANCE\";\n\nexport type WithSpacingPaddingBorderRadiusNode =\n  | FrameNode\n  | ComponentNode\n  | InstanceNode;\nexport const isWithSpacingPaddingBorderRadiusNodeType = (\n  node: SceneNode\n): node is WithSpacingPaddingBorderRadiusNode =>\n  node.type === \"FRAME\" ||\n  node.type === \"COMPONENT\" ||\n  node.type === \"INSTANCE\";\n\nexport type WithColorFillNode =\n  | FrameNode\n  | ComponentNode\n  | InstanceNode\n  | RectangleNode\n  | TextNode\n  | EllipseNode\n  | VectorNode;\nexport const isWithColorFillNodeType = (\n  node: SceneNode\n): node is WithColorFillNode =>\n  node.type === \"FRAME\" ||\n  node.type === \"COMPONENT\" ||\n  node.type === \"INSTANCE\" ||\n  node.type === \"RECTANGLE\" ||\n  node.type === \"TEXT\" ||\n  node.type === \"ELLIPSE\" ||\n  node.type === \"VECTOR\";\n\nexport interface Layout {\n  id: string;\n  name: string;\n  type: ValidNodeType;\n  layoutMode?: \"NONE\" | \"HORIZONTAL\" | \"VERTICAL\" | \"GRID\";\n  itemSpacing?: number;\n  paddingLeft?: number;\n  paddingRight?: number;\n  paddingTop?: number;\n  paddingBottom?: number;\n  cornerRadius?: number | symbol;\n  layoutAlign?: \"MIN\" | \"CENTER\" | \"MAX\" | \"STRETCH\" | \"INHERIT\";\n  width?: number;\n  height?: number;\n  fills?: ReadonlyArray<Paint> | symbol;\n  boundVariables: any;\n}\nexport const validAttributesForSpacingVariables = [\n  \"paddingLeft\",\n  \"paddingRight\",\n  \"paddingTop\",\n  \"paddingBottom\",\n  \"itemSpacing\",\n] as const;\nexport const validAttributesForBorderRadiusVariables = [\n  \"topLeftRadius\",\n  \"topRightRadius\",\n  \"bottomLeftRadius\",\n  \"bottomRightRadius\",\n] as const;\nexport const validAttributesForIconSizesVariables = [\n  \"width\",\n  \"height\",\n] as const;\n\nexport type ApplyVariableKey = \"spacing\" | \"borderRadius\" | \"iconSizes\";\nexport const mkBindableNodeField = (key: ApplyVariableKey) => {\n  switch (key) {\n    case \"spacing\":\n      return validAttributesForSpacingVariables;\n    case \"borderRadius\":\n      return validAttributesForBorderRadiusVariables;\n    case \"iconSizes\":\n      return validAttributesForIconSizesVariables;\n  }\n};\n\nexport const mkLayout = (node: SceneNode): Layout => ({\n  id: node.id,\n  name: node.name,\n  type: node.type as ValidNodeType,\n  layoutMode: \"layoutMode\" in node ? node.layoutMode : undefined,\n  itemSpacing: \"itemSpacing\" in node ? node.itemSpacing : undefined,\n  paddingLeft: \"paddingLeft\" in node ? node.paddingLeft : undefined,\n  paddingRight: \"paddingRight\" in node ? node.paddingRight : undefined,\n  paddingTop: \"paddingTop\" in node ? node.paddingTop : undefined,\n  paddingBottom: \"paddingBottom\" in node ? node.paddingBottom : undefined,\n  cornerRadius: \"cornerRadius\" in node ? node.cornerRadius : undefined,\n  layoutAlign: \"layoutAlign\" in node ? node.layoutAlign : undefined,\n  width: \"width\" in node ? node.width : undefined,\n  height: \"height\" in node ? node.height : undefined,\n  fills: \"fills\" in node ? node.fills : undefined,\n  boundVariables: \"boundVariables\" in node ? node.boundVariables : undefined,\n});\n\nexport interface ClosestVariable {\n  v: Variable;\n  valueDifference: number;\n  newValue: number;\n  originalValue: number;\n}\n\nexport const clone = (val: symbol | readonly Paint[]) =>\n  JSON.parse(JSON.stringify(val));\n\nexport const rgbToHex = ({\n  r,\n  g,\n  b,\n}: {\n  r: number;\n  g: number;\n  b: number;\n}): string => {\n  const to255 = (val: number) => Math.round(val * 255);\n  const toHex = (val: number) => to255(val).toString(16).padStart(2, \"0\");\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`.toUpperCase();\n};\n\nexport const colorVariableScopeMatchTextNode = (\n  node: SceneNode,\n  variable: Variable\n) =>\n  node.type === \"TEXT\" &&\n  (variable.scopes.includes(\"ALL_SCOPES\") ||\n    variable.scopes.includes(\"ALL_FILLS\") ||\n    variable.scopes.includes(\"TEXT_FILL\"));\n\nexport const colorVariableScopeMatchSVGNode = (\n  node: SceneNode,\n  variable: Variable\n) =>\n  (node.type === \"ELLIPSE\" || node.type === \"VECTOR\") &&\n  (variable.scopes.includes(\"ALL_SCOPES\") ||\n    variable.scopes.includes(\"ALL_FILLS\") ||\n    variable.scopes.includes(\"TEXT_FILL\") ||\n    variable.scopes.includes(\"SHAPE_FILL\") ||\n    variable.scopes.includes(\"STROKE_COLOR\"));\n\nexport const colorVariableScopeMatchWithBgNode = (\n  node: SceneNode,\n  variable: Variable\n) =>\n  (node.type === \"COMPONENT\" ||\n    node.type === \"FRAME\" ||\n    node.type === \"INSTANCE\" ||\n    node.type === \"SECTION\" ||\n    node.type === \"GROUP\" ||\n    node.type === \"RECTANGLE\") &&\n  (variable.scopes.includes(\"ALL_SCOPES\") ||\n    variable.scopes.includes(\"ALL_FILLS\") ||\n    variable.scopes.includes(\"FRAME_FILL\") ||\n    variable.scopes.includes(\"SHAPE_FILL\")) &&\n  !variable.scopes.includes(\"TEXT_FILL\");\n\nexport const variableScopeNone = (variable: Variable) =>\n  variable.scopes.length === 0;\n\nexport const isMatchScopeVariableAndNodeSet = (\n  node: SceneNode,\n  variable: Variable\n) =>\n  colorVariableScopeMatchTextNode(node, variable) ||\n  colorVariableScopeMatchSVGNode(node, variable) ||\n  colorVariableScopeMatchWithBgNode(node, variable);\n\nconst personal_token = \"replace_with_your_own_token\";\n\nexport async function getDesignSystemComponents(fileKey: string) {\n  const url = `https://api.figma.com/v1/files/${fileKey}/components`;\n  const res = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"X-Figma-Token\": personal_token,\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!res.ok) {\n    throw new Error(`\u274C \u8BF7\u6C42\u5931\u8D25: ${res.status} ${res.statusText}`);\n  }\n\n  return await res.json();\n}\n", "import {\n  ApplyVariableKey,\n  clone,\n  ClosestVariable,\n  findLocalCollectionByName,\n  findRemoteCollectionByName,\n  getDesignSystemComponents,\n  isMatchScopeVariableAndNodeSet,\n  isValidInstance,\n  isValidNodeType,\n  isWithColorFillNodeType,\n  isWithSpacingPaddingBorderRadiusNodeType,\n  Message,\n  mkBindableNodeField,\n  mkLayout,\n  rgbToHex,\n  WithColorFillNode,\n  WithSpacingPaddingBorderRadiusNode,\n} from \"./helper\";\n\n// This file holds the main code for plugins. Code in this file has access to\n// the *figma document* via the figma global object.\n// You can access browser APIs in the <script> tag inside \"ui.html\" which has a\n// full browser environment (See https://www.figma.com/plugin-docs/how-plugins-run).\n\n// This shows the HTML page in \"ui.html\".\nfigma.showUI(__html__, { width: 550, height: 500 });\n\nfigma.ui.onmessage = async (msg: Message) => {\n  const selection = figma.currentPage.selection;\n\n  const collectionsRemote =\n    await figma.teamLibrary.getAvailableLibraryVariableCollectionsAsync();\n  const collectionsLocal =\n    await figma.variables.getLocalVariableCollectionsAsync();\n\n  const spacingCollectionLocal = findLocalCollectionByName(\n    \"spacing\",\n    collectionsLocal\n  );\n  const borderRadiusCollectionLocal = findLocalCollectionByName(\n    \"borderRadius\",\n    collectionsLocal\n  );\n  const iconSizesCollectionLocal = findLocalCollectionByName(\n    \"iconSizes\",\n    collectionsLocal\n  );\n  const colorsCollectionLocal = findLocalCollectionByName(\n    \"colors\",\n    collectionsLocal\n  );\n\n  const spacingCollectionRemote = findRemoteCollectionByName(\n    \"spacing\",\n    collectionsRemote\n  );\n  const borderRadiusCollectionRemote = findRemoteCollectionByName(\n    \"borderRadius\",\n    collectionsRemote\n  );\n  const iconSizesCollectionRemote = findRemoteCollectionByName(\n    \"iconSizes\",\n    collectionsRemote\n  );\n  const colorsCollectionRemote = findRemoteCollectionByName(\n    \"colors\",\n    collectionsRemote\n  );\n\n  if (selection.length === 0) {\n    figma.notify(\"select at least one Frame or Section or Page\");\n    figma.ui.postMessage(\"!!! No selection selected\");\n    return;\n  }\n\n  const feedback: Array<string> = [];\n  if (msg.type === \"swapComponent\") {\n    const getNativeDesignSystemRes = await getDesignSystemComponents(\n      \"fake_file_key_replace_with_your_own_token\"\n    );\n    for (const node of selection) {\n      await swapComponent(\n        node,\n        feedback,\n        getNativeDesignSystemRes.meta.components\n      );\n    }\n  } else if (msg.type === \"setColorAlias\") {\n    feedback.push(\"\u2764\uFE0E \uD83D\uDD75\uD83C\uDFFB\u200D\u2640\uFE0F \u261E : Set alias\");\n    if (colorsCollectionLocal && colorsCollectionRemote) {\n      const colorsCollectionsLib =\n        await figma.teamLibrary.getVariablesInLibraryCollectionAsync(\n          colorsCollectionRemote.key\n        );\n      for (const variableId of colorsCollectionLocal.variableIds) {\n        const localVariableById = await figma.variables.getVariableByIdAsync(\n          variableId\n        );\n        if (localVariableById) {\n          for (const modeId in localVariableById.valuesByMode) {\n            let setAlias = false;\n\n            const localValue: RGBA | VariableAlias = localVariableById\n              .valuesByMode[modeId] as RGBA;\n            // local value is VariableAlias when alias is already set\n            if (\"type\" in localValue && localValue.type === \"VARIABLE_ALIAS\") {\n              setAlias = true;\n            }\n            for (const remoteVariableId of colorsCollectionsLib) {\n              if (setAlias) {\n                break;\n              }\n              const importedVariable =\n                await figma.variables.importVariableByKeyAsync(\n                  remoteVariableId.key\n                );\n\n              if (importedVariable) {\n                for (const remoteModeId in importedVariable.valuesByMode) {\n                  const remoteValue = importedVariable.valuesByMode[\n                    remoteModeId\n                  ] as RGBA;\n\n                  if (\n                    localValue.r === remoteValue.r &&\n                    localValue.g === remoteValue.g &&\n                    localValue.b === remoteValue.b &&\n                    localValue.a === remoteValue.a\n                  ) {\n                    localVariableById.setValueForMode(\n                      modeId,\n                      figma.variables.createVariableAlias(importedVariable)\n                    );\n                    feedback.push(\n                      `\uD83E\uDEBC Color Alias set: ${localVariableById.name} -> ${importedVariable.name}`\n                    );\n                    setAlias = true;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      feedback.push(\n        \"\u274C \u26F3\uFE0FLOCAL and \uD83D\uDCDALIBRARY: Can not set alias, either no local or library color variables found\"\n      );\n    }\n  } else {\n    for (const node of selection) {\n      await traverseAndApply(\n        node,\n        {\n          spacingCollectionLocal,\n          borderRadiusCollectionLocal,\n          iconSizesCollectionLocal,\n          colorsCollectionLocal,\n        },\n        {\n          spacingCollectionRemote,\n          borderRadiusCollectionRemote,\n          iconSizesCollectionRemote,\n          colorsCollectionRemote,\n        },\n        feedback,\n        msg\n      );\n    }\n  }\n\n  figma.ui.postMessage(feedback.join(\"\\n\"));\n};\n\nasync function swapComponent(\n  node: SceneNode,\n  feedback: Array<string>,\n  components: Array<{ name: string; key: string; node_id: string }>\n) {\n  feedback.push(\n    `\u2764\uFE0E \uD83D\uDD75\uD83C\uDFFB\u200D\u2640\uFE0F \u261E Swap component: Node Name:\u3010 ${node.name} \u3011 \u2736 Type: \u300C ${node.type} \u300D`\n  );\n  console.log(\"selectedNode\", node.name, node.type);\n\n  if (isValidInstance(node)) {\n    const mainComponent = (await node.getMainComponentAsync()) as ComponentNode;\n    // await node.swapComponent()\n    // const getLunarDesignSystemRes = await getDesignSystemComponents(\n    //   LUNAR_DESIGN_SYSTEM_FILE_KEY\n    // );\n    // const getNativeDesignSystemRes = await getDesignSystemComponents(\n    //   NATIVE_DESIGN_SYSTEM_FILE_KEY\n    // );\n    // const allLunarDesignSystemIcons =\n    //   getLunarDesignSystemRes.meta.components.filter((c: any) =>\n    //     c.name.includes(\"icon/\")\n    //   );\n    const iconFromNativeDesignSystem = components.filter(\n      (c: any) =>\n        c.name.includes(\"icon/\") &&\n        (c.name.replace(\"icon/\", \"baseIcon/\") === node.name ||\n          c.name === node.name)\n    );\n\n    console.log(\"MainComponent:\", JSON.stringify(mainComponent));\n    console.log(\n      \"iconFromNativeDesignSystem:\",\n      JSON.stringify(iconFromNativeDesignSystem)\n    );\n\n    if (iconFromNativeDesignSystem.length > 0) {\n      if (iconFromNativeDesignSystem[0].node_id === mainComponent.id) {\n        feedback.push(\n          `\uD83E\uDD51 Swap component \uD83C\uDF49\uD83C\uDF49!!! ${node.name} is already using the native design system component`\n        );\n      } else {\n        const getIconAsComponent = (await figma.importComponentByKeyAsync(\n          iconFromNativeDesignSystem[0].key\n        )) as ComponentNode;\n\n        console.log(\n          \"getIconAsComponent:\",\n          JSON.stringify(getIconAsComponent),\n          getIconAsComponent?.name,\n          getIconAsComponent?.remote\n        );\n\n        await node.swapComponent(getIconAsComponent);\n        feedback.push(\n          `\uD83E\uDD51 Swap component \u2713!!!swapped to -> ${getIconAsComponent.name}`\n        );\n      }\n    } else {\n      feedback.push(\n        `\uD83E\uDD51 Swap component \u274C\u274C!!!cant find icon from Lunar native Library for ${node.name}`\n      );\n    }\n    //\n  } else {\n    feedback.push(\"\u274C Invalid node type. Valid node types are INSTANCE\");\n  }\n}\n\ninterface CollectionLocal {\n  spacingCollectionLocal?: VariableCollection;\n  borderRadiusCollectionLocal?: VariableCollection;\n  iconSizesCollectionLocal?: VariableCollection;\n  colorsCollectionLocal?: VariableCollection;\n}\ninterface CollectionRemote {\n  spacingCollectionRemote?: LibraryVariableCollection;\n  borderRadiusCollectionRemote?: LibraryVariableCollection;\n  iconSizesCollectionRemote?: LibraryVariableCollection;\n  colorsCollectionRemote?: LibraryVariableCollection;\n}\n\nasync function traverseAndApply(\n  node: SceneNode,\n  collectionsLocal: CollectionLocal,\n  collectionsRemote: CollectionRemote,\n  feedback: Array<string>,\n  msg: Message\n) {\n  feedback.push(\n    `\u2764\uFE0E \uD83D\uDD75\uD83C\uDFFB\u200D\u2640\uFE0F \u261E Apply variables: Node Name:\u3010 ${node.name} \u3011 \u2736 Type: \u300C ${node.type} \u300D`\n  );\n\n  const {\n    spacingCollectionLocal,\n    borderRadiusCollectionLocal,\n    iconSizesCollectionLocal,\n    colorsCollectionLocal,\n  } = collectionsLocal;\n  const {\n    spacingCollectionRemote,\n    borderRadiusCollectionRemote,\n    colorsCollectionRemote,\n    iconSizesCollectionRemote,\n  } = collectionsRemote;\n\n  if (isValidNodeType(node)) {\n    const layoutInfo = mkLayout(node);\n    console.log(\n      \"Node Name:\",\n      node.name,\n      \"- layoutInfo:\",\n      JSON.stringify(layoutInfo)\n    );\n\n    //apply layout variables\n    if (msg.type === \"getLayoutSpecifications\") {\n      if (isWithSpacingPaddingBorderRadiusNodeType(node)) {\n        if (!spacingCollectionLocal) {\n          if (!spacingCollectionRemote) {\n            feedback.push(\n              \"\u274C \u26F3\uFE0FLOCAL and \uD83D\uDCDALIBRARY: No spacing variable collection found\"\n            );\n            return;\n          } else {\n            await applyLibraryVariables(\n              node,\n              spacingCollectionRemote,\n              feedback,\n              \"spacing\"\n            );\n          }\n        } else {\n          await applyLocalVariables(\n            node,\n            spacingCollectionLocal,\n            feedback,\n            \"spacing\"\n          );\n        }\n\n        if (!borderRadiusCollectionLocal) {\n          if (!borderRadiusCollectionRemote) {\n            feedback.push(\n              \"\u274C \u26F3\uFE0FLOCAL and \uD83D\uDCDALIBRARY: No borderRadius variable collection found\"\n            );\n            return;\n          } else {\n            await applyLibraryVariables(\n              node,\n              borderRadiusCollectionRemote,\n              feedback,\n              \"borderRadius\"\n            );\n          }\n        } else {\n          await applyLocalVariables(\n            node,\n            borderRadiusCollectionLocal,\n            feedback,\n            \"borderRadius\"\n          );\n        }\n\n        if (node.name.includes(\"icon/\")) {\n          if (!iconSizesCollectionLocal) {\n            if (!iconSizesCollectionRemote) {\n              feedback.push(\n                \"\u274C \u26F3\uFE0FLOCAL and \uD83D\uDCDALIBRARY: No iconSizes variable collection found\"\n              );\n              return;\n            } else {\n              await applyLibraryVariables(\n                node,\n                iconSizesCollectionRemote,\n                feedback,\n                \"iconSizes\"\n              );\n            }\n          } else {\n            await applyLocalVariables(\n              node,\n              iconSizesCollectionLocal,\n              feedback,\n              \"iconSizes\"\n            );\n          }\n        } else {\n          feedback.push(\n            \"\uD83D\uDE48\uD83D\uDE48 Not an icon node, skip iconSizes variable application\"\n          );\n        }\n\n        //\n      } else {\n        feedback.push(\n          \"\u203C\uFE0F No spacing & padding & border radius in node layout specification\"\n        );\n      }\n    }\n\n    //apply colors\n    if (msg.type === \"getColorSpecifications\") {\n      if (isWithColorFillNodeType(node)) {\n        if (!colorsCollectionLocal) {\n          if (!colorsCollectionRemote) {\n            feedback.push(\n              \"\u274C \u26F3\uFE0FLOCAL and \uD83D\uDCDALIBRARY: No colors collection found\"\n            );\n            return;\n          } else {\n            await applyColorsLibraryVariable(\n              node,\n              colorsCollectionRemote,\n              feedback\n            );\n          }\n        } else {\n          await applyColorsLocalVariable(node, colorsCollectionLocal, feedback);\n        }\n      } else {\n        feedback.push(\"\u203C\uFE0F No colors in node layout specification\");\n      }\n    }\n\n    //\n  } else {\n    feedback.push(\n      \"\u274C Invalid node type. Valid node types are FRAME| COMPONENT | INSTANCE | SECTION | GROUP | RECTANGLE | TEXT | ELLIPSE | VECTOR.\"\n    );\n  }\n\n  if (\"children\" in node) {\n    for (const child of node.children) {\n      await traverseAndApply(\n        child,\n        collectionsLocal,\n        collectionsRemote,\n        feedback,\n        msg\n      );\n    }\n  }\n}\n\nasync function applyLibraryVariables(\n  node: WithSpacingPaddingBorderRadiusNode,\n  collectionRemote: LibraryVariableCollection,\n  msg: Array<string>,\n  key: ApplyVariableKey\n) {\n  const collectionsByKey =\n    await figma.teamLibrary.getVariablesInLibraryCollectionAsync(\n      collectionRemote.key\n    );\n\n  const bindableNodeField = mkBindableNodeField(key);\n  const msgTitle = key.toUpperCase();\n\n  for (const attribute of bindableNodeField) {\n    let appliedVariable = false;\n    let closestVariable: ClosestVariable | undefined = undefined;\n\n    // if the attribute is 0, we can dont need to apply variable\n    if ((node[attribute] as number) === 0) {\n      appliedVariable = true;\n    } else {\n      for (const variableId of collectionsByKey) {\n        if (appliedVariable) {\n          break;\n        }\n        const importedVariable = await figma.variables.importVariableByKeyAsync(\n          variableId.key\n        );\n        if (importedVariable) {\n          for (const modeId in importedVariable.valuesByMode) {\n            const value = importedVariable.valuesByMode[modeId];\n\n            if (value === node[attribute]) {\n              node.setBoundVariable(attribute, importedVariable);\n              msg.push(\n                `\uD83D\uDCDA LIBRARY: ${msgTitle} \u2713!!! ${attribute}(${node[attribute]}) - ${importedVariable.name}(${value})`\n              );\n              appliedVariable = true;\n              break;\n            } else {\n              const valueDifference = Math.abs(\n                (value as number) - node[attribute]\n              );\n              if (\n                !closestVariable ||\n                valueDifference < closestVariable.valueDifference\n              ) {\n                closestVariable = {\n                  v: importedVariable,\n                  valueDifference,\n                  newValue: value as number,\n                  originalValue: node[attribute],\n                };\n              }\n            }\n          }\n        }\n      }\n      if (closestVariable && !appliedVariable) {\n        node.setBoundVariable(attribute, closestVariable.v);\n        msg.push(\n          `\uD83D\uDCDA LIBRARY: ${msgTitle} \u2713!!! ${attribute}(${closestVariable.originalValue}) - ${closestVariable.v.name}(${closestVariable.newValue}) applied as closest value !!!`\n        );\n        appliedVariable = true;\n      }\n    }\n    if (!appliedVariable) {\n      msg.push(\n        `\uD83D\uDCDA LIBRARY: ${msgTitle} \u2049\uFE0F!!! ${attribute} - ${node[attribute]} can not find equal variable`\n      );\n    }\n  }\n}\n\nasync function applyLocalVariables(\n  node: WithSpacingPaddingBorderRadiusNode,\n  collectionLocal: VariableCollection,\n  msg: Array<string>,\n  key: ApplyVariableKey\n) {\n  const bindableNodeField = mkBindableNodeField(key);\n  const msgTitle = key.toUpperCase();\n\n  for (const attribute of bindableNodeField) {\n    let appliedVariable = false;\n    let closestVariable: ClosestVariable | undefined = undefined;\n\n    // if the attribute is 0, we can dont need to apply variable\n    if (node[attribute] === 0) {\n      appliedVariable = true;\n    } else {\n      for (const variableId of collectionLocal.variableIds) {\n        if (appliedVariable) {\n          break;\n        }\n        const variableById = await figma.variables.getVariableByIdAsync(\n          variableId\n        );\n        if (variableById) {\n          for (const modeId in variableById.valuesByMode) {\n            const value = variableById.valuesByMode[modeId];\n            if (value === node[attribute]) {\n              node.setBoundVariable(attribute, variableById);\n              msg.push(\n                `\u26F3\uFE0F LOCAL: ${msgTitle} \u2713!!! ${attribute} - ${variableById.name}(${value})`\n              );\n              appliedVariable = true;\n              break;\n            } else {\n              const valueDifference = Math.abs(\n                (value as number) - node[attribute]\n              );\n              if (\n                !closestVariable ||\n                valueDifference < closestVariable.valueDifference\n              ) {\n                closestVariable = {\n                  v: variableById,\n                  valueDifference,\n                  newValue: value as number,\n                  originalValue: node[attribute],\n                };\n              }\n            }\n          }\n        }\n      }\n      if (closestVariable && !appliedVariable) {\n        node.setBoundVariable(attribute, closestVariable.v);\n        msg.push(\n          `\u26F3\uFE0F LOCAL: ${msgTitle} \u2713!!! ${attribute}(${closestVariable.originalValue}) - ${closestVariable.v.name}(${closestVariable.newValue}) applied as closest value !!!`\n        );\n        appliedVariable = true;\n      }\n    }\n    if (!appliedVariable) {\n      msg.push(\n        `\u26F3\uFE0F LOCAL: ${msgTitle} \u2049\uFE0F!!! ${attribute}(${node[attribute]}) - ${node[attribute]} can not find equal variable`\n      );\n    }\n  }\n}\n\nasync function applyColorsLibraryVariable(\n  node: WithColorFillNode,\n  collectionRemote: LibraryVariableCollection,\n  msg: Array<string>\n) {\n  const fillsCopy = clone(node.fills);\n  const collectionsByKey =\n    await figma.teamLibrary.getVariablesInLibraryCollectionAsync(\n      collectionRemote.key\n    );\n\n  let appliedVariable = false;\n  if (fillsCopy[0] && fillsCopy[0].type === \"SOLID\") {\n    for (const variableId of collectionsByKey) {\n      if (appliedVariable) {\n        break;\n      }\n      const importedVariable = await figma.variables.importVariableByKeyAsync(\n        variableId.key\n      );\n      if (importedVariable) {\n        if (!isMatchScopeVariableAndNodeSet(node, importedVariable)) {\n          console.log(\"variable scope does not fit\");\n        } else {\n          await applyColorVariable(\n            node,\n            importedVariable,\n            msg,\n            fillsCopy,\n            () => {\n              appliedVariable = true;\n            },\n            \"\uD83D\uDCDA LIBRARY\"\n          );\n        }\n      }\n    }\n  } else {\n    msg.push(\n      `\uD83D\uDCDA LIBRARY: Fills \uD83D\uDE48\uD83D\uDE48 ${\n        fillsCopy[0] === undefined\n          ? \"No fills\"\n          : fillsCopy[0].type !== \"SOLID\"\n          ? \"Not solid fill type\"\n          : \"Unknown getting fills error\"\n      }`\n    );\n  }\n  if (!appliedVariable) {\n    msg.push(\n      `\uD83D\uDCDA LIBRARY: Fills \u2049\uFE0F!!! ${fillsCopy} -  can not find equal variable`\n    );\n  }\n}\n\nasync function applyColorsLocalVariable(\n  node: WithColorFillNode,\n  collectionLocal: VariableCollection,\n  msg: Array<string>\n) {\n  const fillsCopy = clone(node.fills);\n  let appliedVariable = false;\n\n  if (fillsCopy[0] && fillsCopy[0].type === \"SOLID\") {\n    for (const variableId of collectionLocal.variableIds) {\n      if (appliedVariable) {\n        break;\n      }\n      const variableById = await figma.variables.getVariableByIdAsync(\n        variableId\n      );\n\n      if (variableById) {\n        if (!isMatchScopeVariableAndNodeSet(node, variableById)) {\n          console.log(\"variable scope does not fit\");\n        } else {\n          await applyColorVariable(\n            node,\n            variableById,\n            msg,\n            fillsCopy,\n            () => {\n              appliedVariable = true;\n            },\n            \"\u26F3\uFE0F LOCAL\"\n          );\n        }\n      }\n    }\n  } else {\n    msg.push(\n      `\u26F3\uFE0F LOCAL: Fills \uD83D\uDE48\uD83D\uDE48 ${\n        fillsCopy[0] === undefined\n          ? \"No fills\"\n          : fillsCopy[0].type !== \"SOLID\"\n          ? \"Not solid fill type\"\n          : \"Unknown getting fills error\"\n      }`\n    );\n  }\n  if (!appliedVariable) {\n    msg.push(\n      `\u26F3\uFE0F LOCAL: Fills \u2049\uFE0F!!! ${fillsCopy} -  can not find equal variable`\n    );\n  }\n}\n\nasync function applyColorVariable(\n  node: WithColorFillNode,\n  variableById: Variable,\n  msg: Array<string>,\n  fillsCopy: any,\n  onAppliedVariable: () => void,\n  msgHeader: string\n) {\n  const originalColor = fillsCopy[0].color;\n  let appliedLocal = false;\n\n  for (const modeId in variableById.valuesByMode) {\n    if (appliedLocal) {\n      break;\n    }\n    const value = variableById.valuesByMode[modeId] as RGBA | VariableAlias;\n    if (\"type\" in value && value.type === \"VARIABLE_ALIAS\") {\n      const target = await figma.variables.getVariableByIdAsync(value.id);\n      let appliedFromAliasLocal = false;\n      for (const modeId in target?.valuesByMode) {\n        if (appliedFromAliasLocal) {\n          break;\n        }\n        const aliasValue = target?.valuesByMode[modeId] as RGBA;\n        await checkAndBoundColorVariable(\n          node,\n          variableById,\n          msg,\n          fillsCopy,\n          originalColor,\n          aliasValue,\n          () => {\n            appliedFromAliasLocal = true;\n            appliedLocal = true;\n            onAppliedVariable();\n          },\n          msgHeader\n        );\n      }\n    } else if (\n      typeof value === \"object\" &&\n      \"r\" in value &&\n      \"g\" in value &&\n      \"b\" in value &&\n      \"a\" in value\n    ) {\n      await checkAndBoundColorVariable(\n        node,\n        variableById,\n        msg,\n        fillsCopy,\n        originalColor,\n        value,\n        () => {\n          appliedLocal = true;\n          onAppliedVariable();\n        },\n        msgHeader\n      );\n    }\n  }\n}\n\nasync function checkAndBoundColorVariable(\n  node: WithColorFillNode,\n  variableById: Variable,\n  msg: Array<string>,\n  fillsCopy: any,\n  originalColor: any,\n  targetValue: RGBA,\n  onAppliedVariable: () => void,\n  msgHeader: string\n) {\n  if (\n    targetValue.r === originalColor.r &&\n    targetValue.g === originalColor.g &&\n    targetValue.b === originalColor.b &&\n    targetValue.a === (originalColor.a ?? 1)\n  ) {\n    fillsCopy[0] = figma.variables.setBoundVariableForPaint(\n      fillsCopy[0],\n      \"color\",\n      variableById\n    );\n    node.fills = fillsCopy;\n    msg.push(\n      `${msgHeader}: Fills \u2713!!! ${rgbToHex(originalColor)} - ${\n        variableById.name\n      }(${rgbToHex(targetValue)})`\n    );\n    onAppliedVariable();\n  }\n}\n"],
  "mappings": "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",
  "names": ["modeId"]
}
